<Project ToolsVersion="12.0" DefaultTargets="BuildAndTest" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="$(MSBuildThisFileDirectory)dir.props" />

   <!--
    Stress suite generation properties
   -->
  <PropertyGroup>
    <SuiteName Condition="'$(SuiteName)' == ''">$(BuildMoniker)</SuiteName>
    <SuiteConfig Condition="'$(SuiteConfig)' == ''">smoketest.suite.json</SuiteConfig>
    <SuiteConfigPath Condition="'$(SuiteConfigPath)' == ''">$(MSBuildThisFileDirectory)suiteconfig/$(SuiteConfig)</SuiteConfigPath>
    <GeneratedRootPath Condition="'$(GeneratedRootPath)' == ''">$(MSBuildThisFileDirectory)generated/</GeneratedRootPath>
    <SuitePath Condition="'$(SuitePath)' == ''">$(GeneratedRootPath)$(SuiteName)/</SuitePath>
    <DiscoveryCachePath Condition="'$(DiscoveryCachePath)'==''">$(BaseIntermediateOutputPath)testdiscoverycache.json</DiscoveryCachePath>
  </PropertyGroup>
  
  <!--
    Build input properties
    Define where we get product / test binaries and how we discover test binaries
    This will probably change when we merge into the orchestrated build process
    for now we will put them at the root in a 'ext' folder
  -->
  <PropertyGroup>
    <UnitTestFileMask Condition="'$(UnitTestFileMask)' == ''">*.Tests.dll</UnitTestFileMask>
    <UnitTestDirectory Condition="'$(UnitTestDirectory)' == ''">$(MSBuildThisFileDirectory)../bin/obj/TestArchives/</UnitTestDirectory>
  </PropertyGroup>
  
  <PropertyGroup>
    <FetchedDataDir>$(MSBuildThisFileDirectory)../bin/FetchedData/</FetchedDataDir>
  </PropertyGroup>
  
  <!-- 
    Stress tooling locations
    get stress.codegen and stress.execution from the bin directory (using the latest built version) 
    it's possible that this should be changed to use packages to allow development 
    without affecting runs
  -->
  <PropertyGroup>
    <StressCodegenAssmPath>$(BinDir)$(OSGroup).$(Platform).$(Configuration)\stress.codegen\stress.codegen.dll</StressCodegenAssmPath>
    <StressExecAssmPath>$(BinDir)$(OSGroup).$(Platform).$(Configuration)\stress.codegen\stress.execution.dll</StressExecAssmPath>
  </PropertyGroup>
  <PropertyGroup>
    <UnitTestPackageDir>$(MSBuildThisFileDirectory)../packages/</UnitTestPackageDir>
    <UnitTestExtractDir>$(BaseIntermediateOutputPath)utextracted/</UnitTestExtractDir>
    <UnitTestExtractedSemaphore>$(UnitTestExtractDir)extraction.complete</UnitTestExtractedSemaphore>
    <UnitTestDependsBin>$(BaseIntermediateOutputPath)utdepends/</UnitTestDependsBin>
  </PropertyGroup>
  
  <PropertyGroup>
  <!-- 
    Generate the list of properties to pass through to child build processes
  -->
    <GeneratedProjectBuildProps>UnitTestDependsBin=$(UnitTestDependsBin);DisableReferenceCopyLocal=true</GeneratedProjectBuildProps>
    <GeneratedProjectBuildProps Condition="'$(LocalPackageSource)' != ''">$(GeneratedProjectBuildProps);LocalPackageSource=$(LocalPackageSource)</GeneratedProjectBuildProps>
    <GeneratedProjectBuildProps Condition="'$(ConfigurationGroup)' != ''">$(GeneratedProjectBuildProps);ConfigurationGroup=$(ConfigurationGroup)</GeneratedProjectBuildProps>
    <GeneratedProjectBuildProps Condition="'$(ArchiveTests)' != ''">$(GeneratedProjectBuildProps);ArchiveTests=$(ArchiveTests)</GeneratedProjectBuildProps>
    <GeneratedProjectBuildProps Condition="'$(BuildMoniker)' != ''">$(GeneratedProjectBuildProps);BuildMoniker=$(BuildMoniker)</GeneratedProjectBuildProps>
    <GeneratedProjectBuildProps Condition="'$(TestDisabled)' != ''">$(GeneratedProjectBuildProps);TestDisabled=$(TestDisabled)</GeneratedProjectBuildProps>
    <GeneratedProjectBuildProps Condition="'$(BaseNuGetRuntimeIdentifier)' != ''">$(GeneratedProjectBuildProps);BaseNuGetRuntimeIdentifier=$(BaseNuGetRuntimeIdentifier)</GeneratedProjectBuildProps>
    <GeneratedProjectBuildProps Condition="'$(TestNugetRuntimeId)' != ''">$(GeneratedProjectBuildProps);TestNugetRuntimeId=$(TestNugetRuntimeId)</GeneratedProjectBuildProps>
  </PropertyGroup>
  
  <ItemGroup>
    <Repos Include="corefx" >
      <SelectedConfigurationGroup>$(SelectedConfigurationGroup)</SelectedConfigurationGroup>
      <CloudDropAccessToken>$(CoreFxCloudDropAccessToken)</CloudDropAccessToken>
      <TestStorageAccountKey>$(CoreFxCloudDropAccessToken)</TestStorageAccountKey>
    </Repos>
    <Repos Include="coreclr" >
      <SubType>$(SubType)</SubType>
      <CloudDropAccessToken>$(CoreClrCloudDropAccessToken)</CloudDropAccessToken>
      <TestStorageAccountKey>$(CoreClrCloudDropAccessToken)</TestStorageAccountKey>
    </Repos>
    <TestRepos Include="corefx" />
  </ItemGroup>
  <PropertyGroup>
    <BranchName>master</BranchName>
    <SelectedConfigurationGroup>Debug</SelectedConfigurationGroup>
    <SubType>native</SubType>
  </PropertyGroup>
  
  <Import Project="..\dir.targets" />
  <Import Project="..\dir.traversal.targets" />
  <Import Project="$(ToolsDir)Build.Post.targets" Condition="Exists('$(ToolsDir)Build.Post.targets')" />
  
  <ItemGroup> 
     <TestCommandLines Condition="'$(TargetOS)'!='Windows_NT'" Include="chmod +x corerun" /> 
   </ItemGroup>

  <UsingTask TaskName="GenerateStressSuiteTask" AssemblyFile="$(StressCodegenAssmPath)"/>
  <UsingTask TaskName="RetreiveBuildContainerInformation" AssemblyFile="$(StressCodegenAssmPath)"/>
  <UsingTask TaskName="DownloadFromAzure" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.CloudTestTasks.dll"/>
  <UsingTask TaskName="ZipFileExtractToDirectory" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll"/>

  <ItemGroup>
    <JsonFile Include="$(UnitTestDirectory)**\project.json"/>
  </ItemGroup>

  <PropertyGroup>
    <!-- Add ignored tests here for now -->
    <ExcludedTestAssemblies>$(UnitTestDirectory)System.Diagnostics.Process.Tests.zip</ExcludedTestAssemblies>
    <ExcludedTestAssemblies>$(ExcludedTestAssemblies);$(UnitTestDirectory)System.Reflection.Emit.ILGeneration.Tests.zip</ExcludedTestAssemblies>
    <ExcludedTestAssemblies>$(ExcludedTestAssemblies);$(UnitTestDirectory)System.Reflection.Emit.Lightweight.Tests.zip</ExcludedTestAssemblies>
    <ExcludedTestAssemblies>$(ExcludedTestAssemblies);$(UnitTestDirectory)System.Reflection.Emit.Tests.zip</ExcludedTestAssemblies>
  </PropertyGroup> 
  
  <ItemGroup>
    <ZipFile Include="$(UnitTestDirectory)*.zip" Exclude="$(ExcludedTestAssemblies)"/>
  </ItemGroup>

 <Target Name="UnzipAllTests" 
    Condition="!Exists('$(UnitTestExtractedSemaphore)')"
    DependsOnTargets="UnzipTest">
    <WriteLinesToFile File="$(UnitTestExtractedSemaphore)" Lines="" Overwrite="false" />
  </Target>
 
  <Target Name="UnzipTest"
    DependsOnTargets="GetRepoProduct"
    Inputs="@(ZipFile)"
    Outputs="@(ZipFile->Replace('$(UnitTestDirectory)','$(UnitTestExtractDir)'))">
        <Message Text="Unzipping tests: @(ZipFile)" Importance="Low" />
        
        <ZipFileExtractToDirectory Condition="Exists('%(RootDir)%(Directory)%(ZipFile.FileName)%(ZipFile.Extension)')"
            SourceArchive="%(ZipFile.FullPath)"
            DestinationDirectory="$(UnitTestExtractDir)\%(filename)%(extension)"
            OverwriteDestination="true" />
    </Target>
    
    <!-- Download latest product from Azure
         to avoid restoring time to just get a project.json and lockfile
         Query engineering infrastructure for latest build moniker if not set
    -->
  <Target Name="GetRepoProduct" 
          Inputs="%(Repos.Identity)"
          Outputs="CompletedDownloads" 
          Condition="'$(SkipGetRepoProduct)'!='true'" >
    <!-- Pass in specific build parameters if required 
         OS must be in 
        Alpine3.4.3
        Debian8.2
        Fedora23
        Fedora24
        openSUSE42.1
        OSX
        RedHat7
        Ubuntu14.04
        Ubuntu16.04
        Ubuntu16.10
        Windows
    -->
    <PropertyGroup>
      <CurrentRepo>%(Repos.Identity)</CurrentRepo>
    </PropertyGroup>
    <Message Importance="High" Text="Gathering build information for %(Repos.Identity) ..." />
    <RetreiveBuildContainerInformation
        BuildPAT="$(BuildPAT)"
        HelixAPIKey="$(HelixApiAccessKey)"
        Repo="$(CurrentRepo)"
        Branch="$(BranchName)"
        OperatingSystem="$(OperatingSystem)"
        ConfigurationGroup="%(Repos.SelectedConfigurationGroup)"
        Platform="$(Architecture)"
        SubType="%(Repos.SubType)"
        BuildNumber="$(BuildMoniker)"
        TestStorageAccountKey="%(Repos.TestStorageAccountKey)"
        >
      <Output TaskParameter="ProductStorageAccount"
              PropertyName="_EvaluatedProductStorageAccount" />
      <Output TaskParameter="ProductContainerName"
              PropertyName="_EvaluatedProductContainerName" />
      <Output TaskParameter="TestStorageAccount"
              PropertyName="_EvaluatedTestStorageAccount" />
      <Output TaskParameter="TestContainerName"
              PropertyName="_EvaluatedTestContainerName" />
      <Output TaskParameter="TestPattern"
              PropertyName="_EvaluatedTestPattern" />
    </RetreiveBuildContainerInformation>
    
    <RemoveDir Directories="$(FetchedDataDir)" Condition="!Exists('$(FetchedDataDir)')" />
    <MakeDir Directories="$(FetchedDataDir)" />
    
    <Message Importance="High" Text="$(CurrentRepo) Product SA: $(_EvaluatedProductStorageAccount) Product Container:$(_EvaluatedProductContainerName) Test SA: $(_EvaluatedTestStorageAccount) Test Container:$(_EvaluatedTestContainerName) " />
    <Message Importance="High" Text="Downloading $(CurrentRepo) Product ... " />
    
    <DownloadFromAzure AccountName="$(_EvaluatedProductStorageAccount)"
                       AccountKey="%(Repos.CloudDropAccessToken)"
                       ContainerName="$(_EvaluatedProductContainerName)"
                       DownloadDirectory="$(FetchedDataDir)%(Repos.Identity)" />
    
    <Message Importance="High" Text="Downloading $(CurrentRepo) Test ... " Condition="'%(TestRepos.Identity)'=='$(CurrentRepo)'"/>
    <DownloadFromAzure AccountName="$(_EvaluatedTestStorageAccount)"
                   AccountKey="%(Repos.CloudDropAccessToken)"
                   ContainerName="$(_EvaluatedTestContainerName)"
                   DownloadDirectory="$(FetchedDataDir)tests/%(TestRepos.Identity)" 
                   Condition="'%(TestRepos.Identity)'=='$(CurrentRepo)'" />
                   
    <ItemGroup>
      <CompletedDownloads Include="%(Repos.Identity)" Condition="Exists('$(FetchedDataDir)%(Repos.Identity)')">
        <Semaphore>true</Semaphore>
        <TestPattern>$(_EvaluatedTestPattern)</TestPattern>
      </CompletedDownloads>
    </ItemGroup>
  </Target>

    
  <Target Name="GenerateStressSuiteSource" DependsOnTargets="UnzipAllTests">

    <Error Condition="!Exists('$(SuiteConfigPath)')" Text="ERROR: File not found. Stress suite config path '$(SuiteConfigPath)' is invalid " />

    <MakeDir Directories="$(StressGeneratedRoot)"/>
    
    <Message Text="Generating stress test sources..." Importance="High" />
       
    <GenerateStressSuiteTask
      SuiteName="$(SuiteName)"
      DebugWaitForInput="$(DebugStress)"
      SuitePath="$(SuitePath)"
      DiscoveryCachePath="$(DiscoveryCachePath)"
      ConfigPath="$(SuiteConfigPath)"
      TestPaths="$(UnitTestExtractDir)"
      TestSearchStrings="$(UnitTestFileMask)"
      FrameworkPaths="$(UnitTestDependsBin)"
      PackageConfigPath="$(UnitTestCLIProjJson)"/>
      
  </Target>

  <Target Name="Build" DependsOnTargets="GenerateStressSuiteSource">
    <ItemGroup>
      <GeneratedProjects Include="$(SuitePath)**\*.csproj"/>
    </ItemGroup>

    <MSBuild Targets="Build"
      Projects="@(GeneratedProjects)"
      BuildInParallel="true"
      ContinueOnError="true"
      Properties="$(GeneratedProjectBuildProps)"/>
  </Target>

  <Target Name="Clean">
    
    <Message Text="Cleaning generated projects..." />
    <ItemGroup>
      <GeneratedProjects Include="$(GeneratedRootPath)**\*.csproj"/>
    </ItemGroup>
    
    <MSBuild Targets="Clean"
      Projects="$(MSBuildThisFileDirectory)buildgen.proj"
      BuildInParallel="true"
      ContinueOnError="true"/>
    
    <Message Text="Deleting generated sources..." />
    
    <RemoveDir Directories="$(GeneratedRootPath)" />
   
    <RemoveDir Directories="$(UnitTestCLIProjDir)" />
  </Target>

</Project>
